"use strict";
require("typings-test");
require("should");
var smartssh = require("../dist/index");
describe("smartssh", function () {
    var testSshInstance;
    var testSshKey;
    describe(".SshKey", function () {
        it("'new' keyword should create a valid SshKey object", function () {
            testSshKey = new smartssh.SshKey({
                host: "example.com",
                private: "someExamplePrivateKey",
                public: "someExamplePublicKey"
            });
            testSshKey.should.be.instanceof(smartssh.SshKey);
        });
        it(".type should be a valid type", function () {
            testSshKey.type.should.equal("duplex");
        });
        it(".publicKey should be public key", function () {
            testSshKey.pubKey.should.equal("someExamplePublicKey");
        });
        it(".privateKey should be private key", function () {
            testSshKey.privKey.should.equal("someExamplePrivateKey");
        });
        it(".publicKeyBase64 should be public key base 64 encoded", function () {
            testSshKey.pubKeyBase64;
        });
    });
    describe(".SshInstance", function () {
        it("'new' keyword should create a new SshInstance object from class", function () {
            testSshInstance = new smartssh.SshInstance();
            testSshInstance.should.be.instanceof(smartssh.SshInstance);
        });
        it(".addKey() should accept a new SshKey object", function () {
            testSshInstance.addKey(new smartssh.SshKey({
                public: "somePublicKey",
                private: "somePrivateKey",
                host: "gitlab.com"
            }));
            testSshInstance.addKey(new smartssh.SshKey({
                public: "somePublicKey",
                private: "somePrivateKey",
                host: "bitbucket.org"
            }));
            testSshInstance.addKey(new smartssh.SshKey({
                public: "someGitHubPublicKey",
                private: "someGitHubPrivateKey",
                host: "github.com"
            }));
        });
        it(".sshKeys should point to an array of sshKeys", function () {
            var sshKeyArray = testSshInstance.sshKeys;
            sshKeyArray.should.be.Array();
            sshKeyArray[0].host.should.equal("gitlab.com");
            sshKeyArray[1].host.should.equal("bitbucket.org");
            sshKeyArray[2].host.should.equal("github.com");
        });
        it(".getKey() should get a specific key selected by host", function () {
            testSshInstance.getKey("github.com").pubKey.should.equal("someGitHubPublicKey");
        });
        it(".removeKey() should remove a key", function () {
            testSshInstance.removeKey(testSshInstance.getKey("bitbucket.org"));
            testSshInstance.sshKeys[1].host.should.equal("github.com");
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDbEQsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHNEQUFzRCxFQUFDO1lBQ3RELGVBQWUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNwRixDQUFDLENBQUMsQ0FBQTtRQUNGLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBQztZQUNsQyxlQUFlLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUNuRSxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQSIsImZpbGUiOiJ0ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwidHlwaW5ncy10ZXN0XCJcbmltcG9ydCBcInNob3VsZFwiO1xuaW1wb3J0IHNtYXJ0c3NoID0gcmVxdWlyZShcIi4uL2Rpc3QvaW5kZXhcIik7XG5kZXNjcmliZShcInNtYXJ0c3NoXCIsZnVuY3Rpb24oKXtcbiAgICBsZXQgdGVzdFNzaEluc3RhbmNlOnNtYXJ0c3NoLlNzaEluc3RhbmNlO1xuICAgIGxldCB0ZXN0U3NoS2V5OnNtYXJ0c3NoLlNzaEtleTtcbiAgICBkZXNjcmliZShcIi5Tc2hLZXlcIixmdW5jdGlvbigpe1xuICAgICAgICBpdChcIiduZXcnIGtleXdvcmQgc2hvdWxkIGNyZWF0ZSBhIHZhbGlkIFNzaEtleSBvYmplY3RcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGVzdFNzaEtleSA9IG5ldyBzbWFydHNzaC5Tc2hLZXkoe1xuICAgICAgICAgICAgICAgIGhvc3Q6XCJleGFtcGxlLmNvbVwiLFxuICAgICAgICAgICAgICAgIHByaXZhdGU6XCJzb21lRXhhbXBsZVByaXZhdGVLZXlcIixcbiAgICAgICAgICAgICAgICBwdWJsaWM6XCJzb21lRXhhbXBsZVB1YmxpY0tleVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRlc3RTc2hLZXkuc2hvdWxkLmJlLmluc3RhbmNlb2Yoc21hcnRzc2guU3NoS2V5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiLnR5cGUgc2hvdWxkIGJlIGEgdmFsaWQgdHlwZVwiLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0ZXN0U3NoS2V5LnR5cGUuc2hvdWxkLmVxdWFsKFwiZHVwbGV4XCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCIucHVibGljS2V5IHNob3VsZCBiZSBwdWJsaWMga2V5XCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRlc3RTc2hLZXkucHViS2V5LnNob3VsZC5lcXVhbChcInNvbWVFeGFtcGxlUHVibGljS2V5XCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCIucHJpdmF0ZUtleSBzaG91bGQgYmUgcHJpdmF0ZSBrZXlcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGVzdFNzaEtleS5wcml2S2V5LnNob3VsZC5lcXVhbChcInNvbWVFeGFtcGxlUHJpdmF0ZUtleVwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiLnB1YmxpY0tleUJhc2U2NCBzaG91bGQgYmUgcHVibGljIGtleSBiYXNlIDY0IGVuY29kZWRcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGVzdFNzaEtleS5wdWJLZXlCYXNlNjQ7XG4gICAgICAgIH0pXG4gICAgfSk7XG4gICAgZGVzY3JpYmUoXCIuU3NoSW5zdGFuY2VcIixmdW5jdGlvbigpe1xuICAgICAgICBpdChcIiduZXcnIGtleXdvcmQgc2hvdWxkIGNyZWF0ZSBhIG5ldyBTc2hJbnN0YW5jZSBvYmplY3QgZnJvbSBjbGFzc1wiLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0ZXN0U3NoSW5zdGFuY2UgPSBuZXcgc21hcnRzc2guU3NoSW5zdGFuY2UoKTtcbiAgICAgICAgICAgIHRlc3RTc2hJbnN0YW5jZS5zaG91bGQuYmUuaW5zdGFuY2VvZihzbWFydHNzaC5Tc2hJbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdChcIi5hZGRLZXkoKSBzaG91bGQgYWNjZXB0IGEgbmV3IFNzaEtleSBvYmplY3RcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGVzdFNzaEluc3RhbmNlLmFkZEtleShuZXcgc21hcnRzc2guU3NoS2V5KHtcbiAgICAgICAgICAgICAgICBwdWJsaWM6XCJzb21lUHVibGljS2V5XCIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZTpcInNvbWVQcml2YXRlS2V5XCIsXG4gICAgICAgICAgICAgICAgaG9zdDpcImdpdGxhYi5jb21cIlxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdGVzdFNzaEluc3RhbmNlLmFkZEtleShuZXcgc21hcnRzc2guU3NoS2V5KHtcbiAgICAgICAgICAgICAgICBwdWJsaWM6XCJzb21lUHVibGljS2V5XCIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZTpcInNvbWVQcml2YXRlS2V5XCIsXG4gICAgICAgICAgICAgICAgaG9zdDpcImJpdGJ1Y2tldC5vcmdcIlxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdGVzdFNzaEluc3RhbmNlLmFkZEtleShuZXcgc21hcnRzc2guU3NoS2V5KHtcbiAgICAgICAgICAgICAgICBwdWJsaWM6XCJzb21lR2l0SHViUHVibGljS2V5XCIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZTpcInNvbWVHaXRIdWJQcml2YXRlS2V5XCIsXG4gICAgICAgICAgICAgICAgaG9zdDpcImdpdGh1Yi5jb21cIlxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCIuc3NoS2V5cyBzaG91bGQgcG9pbnQgdG8gYW4gYXJyYXkgb2Ygc3NoS2V5c1wiLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsZXQgc3NoS2V5QXJyYXkgPSB0ZXN0U3NoSW5zdGFuY2Uuc3NoS2V5cztcbiAgICAgICAgICAgIHNzaEtleUFycmF5LnNob3VsZC5iZS5BcnJheSgpO1xuICAgICAgICAgICAgc3NoS2V5QXJyYXlbMF0uaG9zdC5zaG91bGQuZXF1YWwoXCJnaXRsYWIuY29tXCIpO1xuICAgICAgICAgICAgc3NoS2V5QXJyYXlbMV0uaG9zdC5zaG91bGQuZXF1YWwoXCJiaXRidWNrZXQub3JnXCIpO1xuICAgICAgICAgICAgc3NoS2V5QXJyYXlbMl0uaG9zdC5zaG91bGQuZXF1YWwoXCJnaXRodWIuY29tXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCIuZ2V0S2V5KCkgc2hvdWxkIGdldCBhIHNwZWNpZmljIGtleSBzZWxlY3RlZCBieSBob3N0XCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRlc3RTc2hJbnN0YW5jZS5nZXRLZXkoXCJnaXRodWIuY29tXCIpLnB1YktleS5zaG91bGQuZXF1YWwoXCJzb21lR2l0SHViUHVibGljS2V5XCIpO1xuICAgICAgICB9KVxuICAgICAgICBpdChcIi5yZW1vdmVLZXkoKSBzaG91bGQgcmVtb3ZlIGEga2V5XCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRlc3RTc2hJbnN0YW5jZS5yZW1vdmVLZXkodGVzdFNzaEluc3RhbmNlLmdldEtleShcImJpdGJ1Y2tldC5vcmdcIikpO1xuICAgICAgICAgICAgdGVzdFNzaEluc3RhbmNlLnNzaEtleXNbMV0uaG9zdC5zaG91bGQuZXF1YWwoXCJnaXRodWIuY29tXCIpO1xuICAgICAgICB9KVxuICAgIH0pO1xufSkiXX0=
