"use strict";
require("typings-global");
var smartssh_classes_sshdir_1 = require("./smartssh.classes.sshdir");
var SshInstance = (function () {
    function SshInstance(optionsArg) {
        if (optionsArg === void 0) { optionsArg = {}; }
        optionsArg ? void (0) : optionsArg = {};
        this.sshDir = new smartssh_classes_sshdir_1.SshDir(this, optionsArg.sshDirPath);
        this.sshKeyArray = this.sshDir.getKeys();
        this.sshSync = optionsArg.sshSync;
    }
    ;
    //altering methods
    SshInstance.prototype.addKey = function (sshKeyArg) {
        this.sync("from");
        this.sshKeyArray.push(sshKeyArg);
        this.sync("to");
    };
    ;
    SshInstance.prototype.removeKey = function (sshKeyArg) {
        this.sync("from");
        var filteredArray = this.sshKeyArray.filter(function (sshKeyArg2) {
            return (sshKeyArg != sshKeyArg2);
        });
        this.sshKeyArray = filteredArray;
        this.sync("to");
    };
    ;
    SshInstance.prototype.replaceKey = function (sshKeyOldArg, sshKeyNewArg) {
        this.sync("from");
        var filteredArray = this.sshKeyArray.filter(function (sshKeyArg) {
            return (sshKeyArg.host == "some"); //TODO
        });
        this.sshKeyArray = filteredArray;
        this.sync("to");
    };
    ;
    //
    SshInstance.prototype.getKey = function (hostArg) {
        this.sync("from");
        var filteredArray = this.sshKeyArray.filter(function (keyArg) {
            return (keyArg.host == hostArg);
        });
        if (filteredArray.length > 0) {
            return filteredArray[0];
        }
        else {
            return undefined;
        }
    };
    ;
    Object.defineProperty(SshInstance.prototype, "sshKeys", {
        get: function () {
            return this.sshKeyArray;
        },
        enumerable: true,
        configurable: true
    });
    SshInstance.prototype.sync = function (directionArg) {
        if (this.sshSync && directionArg == "from") {
            this.sshDir.syncFromDir(); // call sync method of sshDir class;
        }
        else if (this.sshSync && directionArg == "to") {
            this.sshDir.syncToDir();
        }
        else if (this.sshSync) {
            throw new Error("directionArg not recognised. Must be 'to' or 'from'");
        }
    };
    ;
    return SshInstance;
}());
exports.SshInstance = SshInstance;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNtYXJ0c3NoLmNsYXNzZXMuc3NoaW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFFBQU8sZ0JBQ1AsQ0FBQyxDQURzQjtBQUl2Qix3Q0FBcUIsMkJBQTJCLENBQUMsQ0FBQTtBQUlqRDtJQUtJLHFCQUFZLFVBQW1EO1FBQW5ELDBCQUFtRCxHQUFuRCxlQUFtRDtRQUMzRCxVQUFVLEdBQUcsS0FBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFFdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGdDQUFNLENBQUMsSUFBSSxFQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDO0lBQ3RDLENBQUM7O0lBRUQsa0JBQWtCO0lBQ2xCLDRCQUFNLEdBQU4sVUFBTyxTQUFnQjtRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQzs7SUFDRCwrQkFBUyxHQUFULFVBQVUsU0FBZ0I7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQixJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFDLFVBQWlCO1lBQzFELE1BQU0sQ0FBQyxDQUFDLFNBQVMsSUFBSSxVQUFVLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxXQUFXLEdBQUcsYUFBYSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQzs7SUFDRCxnQ0FBVSxHQUFWLFVBQVcsWUFBbUIsRUFBQyxZQUFtQjtRQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xCLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQUMsU0FBZ0I7WUFDekQsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU07UUFDN0MsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BCLENBQUM7O0lBRUQsRUFBRTtJQUNGLDRCQUFNLEdBQU4sVUFBTyxPQUFjO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEIsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBUyxNQUFNO1lBQ3ZELE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUEsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDekIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ3JCLENBQUM7SUFDTCxDQUFDOztJQUNELHNCQUFJLGdDQUFPO2FBQVg7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQUNELDBCQUFJLEdBQUosVUFBSyxZQUFtQjtRQUNwQixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLFlBQVksSUFBSSxNQUFNLENBQUMsQ0FBQSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxvQ0FBb0M7UUFDbkUsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLFlBQVksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDNUIsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7UUFDM0UsQ0FBQztJQUNMLENBQUM7O0lBQ0wsa0JBQUM7QUFBRCxDQTVEQSxBQTREQyxJQUFBO0FBNURZLG1CQUFXLGNBNER2QixDQUFBIiwiZmlsZSI6InNtYXJ0c3NoLmNsYXNzZXMuc3NoaW5zdGFuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJ0eXBpbmdzLWdsb2JhbFwiXHJcbmltcG9ydCAqIGFzIHBsdWdpbnMgZnJvbSBcIi4vc21hcnRzc2gucGx1Z2luc1wiO1xyXG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gXCIuL3NtYXJ0c3NoLmNsYXNzZXMuaGVscGVyc1wiO1xyXG5cclxuaW1wb3J0IHtTc2hEaXJ9IGZyb20gXCIuL3NtYXJ0c3NoLmNsYXNzZXMuc3NoZGlyXCI7XHJcbmltcG9ydCB7U3NoQ29uZmlnfSBmcm9tIFwiLi9zbWFydHNzaC5jbGFzc2VzLnNzaGNvbmZpZ1wiO1xyXG5pbXBvcnQge1NzaEtleX0gZnJvbSBcIi4vc21hcnRzc2guY2xhc3Nlcy5zc2hrZXlcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTc2hJbnN0YW5jZSB7XHJcbiAgICBwcml2YXRlIHNzaENvbmZpZzpTc2hDb25maWc7IC8vIHNzaENvbmZpZyAoZS5nLiByZXByZXNlbnRzIH4vLnNzaC9jb25maWcpXHJcbiAgICBwcml2YXRlIHNzaERpcjpTc2hEaXI7IC8vIHBvaW50cyB0byBzc2hEaXIgY2xhc3MgaW5zdGFuY2UuXHJcbiAgICBwcml2YXRlIHNzaEtleUFycmF5OlNzaEtleVtdOyAvL2hvbGRzIGFsbCBzc2gga2V5c1xyXG4gICAgcHJpdmF0ZSBzc2hTeW5jOmJvb2xlYW47IC8vIGlmIHNldCB0byB0cnVlLCB0aGUgc3NoIGRpciB3aWxsIGJlIGtlcHQgaW4gc3luYyBhdXRvbWF0aWNhbGx5XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zQXJnOntzc2hEaXJQYXRoPzpzdHJpbmcsc3NoU3luYz86Ym9vbGVhbn09e30pe1xyXG4gICAgICAgIG9wdGlvbnNBcmcgPyB2b2lkKDApIDogb3B0aW9uc0FyZyA9IHt9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3NoRGlyID0gbmV3IFNzaERpcih0aGlzLG9wdGlvbnNBcmcuc3NoRGlyUGF0aCk7XHJcbiAgICAgICAgdGhpcy5zc2hLZXlBcnJheSA9IHRoaXMuc3NoRGlyLmdldEtleXMoKTtcclxuICAgICAgICB0aGlzLnNzaFN5bmMgPSBvcHRpb25zQXJnLnNzaFN5bmM7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvL2FsdGVyaW5nIG1ldGhvZHNcclxuICAgIGFkZEtleShzc2hLZXlBcmc6U3NoS2V5KXtcclxuICAgICAgICB0aGlzLnN5bmMoXCJmcm9tXCIpO1xyXG4gICAgICAgIHRoaXMuc3NoS2V5QXJyYXkucHVzaChzc2hLZXlBcmcpO1xyXG4gICAgICAgIHRoaXMuc3luYyhcInRvXCIpO1xyXG4gICAgfTtcclxuICAgIHJlbW92ZUtleShzc2hLZXlBcmc6U3NoS2V5KXtcclxuICAgICAgICB0aGlzLnN5bmMoXCJmcm9tXCIpO1xyXG4gICAgICAgIGxldCBmaWx0ZXJlZEFycmF5ID0gdGhpcy5zc2hLZXlBcnJheS5maWx0ZXIoKHNzaEtleUFyZzI6U3NoS2V5KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoc3NoS2V5QXJnICE9IHNzaEtleUFyZzIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3NoS2V5QXJyYXkgPSBmaWx0ZXJlZEFycmF5O1xyXG4gICAgICAgIHRoaXMuc3luYyhcInRvXCIpO1xyXG4gICAgfTtcclxuICAgIHJlcGxhY2VLZXkoc3NoS2V5T2xkQXJnOlNzaEtleSxzc2hLZXlOZXdBcmc6U3NoS2V5KXtcclxuICAgICAgICB0aGlzLnN5bmMoXCJmcm9tXCIpO1xyXG4gICAgICAgIGxldCBmaWx0ZXJlZEFycmF5ID0gdGhpcy5zc2hLZXlBcnJheS5maWx0ZXIoKHNzaEtleUFyZzpTc2hLZXkpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIChzc2hLZXlBcmcuaG9zdCA9PSBcInNvbWVcIik7IC8vVE9ET1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3NoS2V5QXJyYXkgPSBmaWx0ZXJlZEFycmF5O1xyXG4gICAgICAgIHRoaXMuc3luYyhcInRvXCIpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy9cclxuICAgIGdldEtleShob3N0QXJnOnN0cmluZyk6U3NoS2V5e1xyXG4gICAgICAgIHRoaXMuc3luYyhcImZyb21cIik7XHJcbiAgICAgICAgbGV0IGZpbHRlcmVkQXJyYXkgPSB0aGlzLnNzaEtleUFycmF5LmZpbHRlcihmdW5jdGlvbihrZXlBcmcpe1xyXG4gICAgICAgICAgICByZXR1cm4gKGtleUFyZy5ob3N0ID09IGhvc3RBcmcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmKGZpbHRlcmVkQXJyYXkubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZEFycmF5WzBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGdldCBzc2hLZXlzKCk6U3NoS2V5W10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNzaEtleUFycmF5O1xyXG4gICAgfVxyXG4gICAgc3luYyhkaXJlY3Rpb25Bcmc6c3RyaW5nKXtcclxuICAgICAgICBpZih0aGlzLnNzaFN5bmMgJiYgZGlyZWN0aW9uQXJnID09IFwiZnJvbVwiKXtcclxuICAgICAgICAgICAgdGhpcy5zc2hEaXIuc3luY0Zyb21EaXIoKTsgLy8gY2FsbCBzeW5jIG1ldGhvZCBvZiBzc2hEaXIgY2xhc3M7XHJcbiAgICAgICAgfSBlbHNlIGlmKHRoaXMuc3NoU3luYyAmJiBkaXJlY3Rpb25BcmcgPT0gXCJ0b1wiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3NoRGlyLnN5bmNUb0RpcigpO1xyXG4gICAgICAgIH0gZWxzZSBpZih0aGlzLnNzaFN5bmMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGlyZWN0aW9uQXJnIG5vdCByZWNvZ25pc2VkLiBNdXN0IGJlICd0bycgb3IgJ2Zyb20nXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcblxyXG4iXX0=
